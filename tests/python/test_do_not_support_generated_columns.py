import tempfile

from python_hooks.do_not_support_generated_columns import check_file
from python_hooks.do_not_support_generated_columns import filter_files


def test_check_file_caught():
    with tempfile.TemporaryDirectory() as temp_dir:
        file_path = f"{temp_dir}/test_file.sql"

        # assert true negative
        with open(file_path, "w") as file:
            file.write(
                """
            CREATE TABLE IF NOT EXISTS analytics.clearance_predictions
            (
                id                       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                booking_id               INT         NULL,
            );
            """
            )

        assert check_file(file_path) == 0

        # assert true positive
        with open(file_path, "w") as file:
            file.write(
                """
            ALTER TABLE some_table RENAME some_id TO some_other_id;
            ALTER TABLE some_table ADD COLUMN some_id INT GENERATED ALWAYS AS (some_other_id) STORED;
            """
            )

        assert check_file(file_path) == 1


def test_filter_files():
    file_names = [
        "/some_dir/20211225_0101create_table.sql",
        "schema/migrations/20240426_1123create_table.sql",
        "schema/migrations/20240426_1123create_table.sql",
        "schema/migrations/20240427_1117create_table.sql",
        "schema/migrations/20240425_0101create_table.sql",
        "schema/migrations/20221225_0101create_table.sql",
        "schema/migrations/202412290101create_table.sql",
        "schema/migrations/202212290101create_table.sql",
    ]
    expected_files = [
        "schema/migrations/20240426_1123create_table.sql",
        "schema/migrations/20240426_1123create_table.sql",
        "schema/migrations/20240427_1117create_table.sql",
        "schema/migrations/202412290101create_table.sql",
    ]
    filtered_files = filter_files(file_names)
    assert filtered_files == expected_files
